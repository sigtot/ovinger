a)
Pseudokode beskriver programlogikk med vanlig språk

Klassifisering av tall:

def checkInt(number):
	if modulo 1 to number is 0 then return True
	else: return False

def checkEven(number):
	if modulo 2 to number is 0 then return True
	else: return False

def checkSign(number):
	if number is larger than 0 then return True
	elif number is smaller than 0 then return False
	else: return 2

def compareNums(n,p):
	if n larger than p or n smaller then p: return False
	else: return True

def main():
	input n
	if n is int then
		print 'Dette er et heltall'
		if n is even then 'Dette er et partall'
		else: print 'Dette er et oddetall'
	else: print 'Dette er ikke et heltall'
	if n is positive: print 'Dette er et positivt tall'
	elif n is 0: print 'Dette tallet er hverken positivt eller negativt'
	else: print 'Dette er et negativt tall'
	main()
main()

ish

b)
Et flytdiagram kan programkode eller andre prosesser i grafisk form. Det er bygget opp av ulike former som beskriver hva programmet skal gjøre. Man starter og slutter med runde former, firkanter gjør ting og diamanter er valg man kan ta. Formene kobles sammen med streker. Følger man streken finner man rekkefølgen i logikken.

c) Hva er debugging?
Feilsøking. Søking etter feil i programmet. 

d) Hva er forksjellen på et høynivå- og et lavnivå-programmeringsspråk? 
Lavnivåspråk bruker man gjerne til å skrive drivere, operativsystemer, programmeringspråk osv. Ting som er langt "nede" i systemarkitekturen. Assembly er et eksempel på et lavnivåspråk. C kode kompileres ofte til assemblykode. Høynivå språk har gjerne mer funksjonalitet innebygd i språket. Språk som python eller javascript er eksempler på høynivå språk. Med slike språk kan man skrive programmer osv. 

e) Forklar de fem stegene i Hente/Utføre-kretsen.
1. Instruction Fetch (IF)
	Adressen til instruksjon hentes og plasseres i Programtelleren (PC)
	Adressen plasseres deretter i MAR (Memory adress register) og PC inkementeres 
	Minnet blir så lest på denne adressen, og denne instruksjonen flyttes til instruksjonsregisteret (IR)

2. Instruction Decode (ID)
	Instruksjonen plasseres i instruksjonsdekoderen
	Her dekodes instruksjonen slik at prosessoren kan utføre den

3. Data Fetch (DF)
	Om instruksen er en aritmetrisk eller logisk operasjon, altså ikke bare en "flytteoperasjon" hentes data fra minne her
	Dataen skal deretter brukes i ALU

4. Instruction execute (EX)
	Instruksjonen utføres

5. Return 
	Resultatet kan så returneres til en adresse i minne

f) Hva gjør programtelleren (Program Counter)?
	I programtelleren ligger minneadressen med instruksjonen som skal kjøres
	Når instruksjonen blir kjørt inkrementeres PC, slik at neste instruksjon kan kjøre